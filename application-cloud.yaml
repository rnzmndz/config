services:
  api-gateway:
    url: ${API_GATEWAY_URL:http://localhost:8080}
  keycloak:
    url: ${KEYCLOAK_URL:http://localhost:8180}
  auth-service:
    url: ${AUTH_SERVICE:http://localhost:8081}
  employee-service:
    url: ${EMPLOYEE_SERVICE:http://localhost:8082}

postgres:
  hostname: ${POSTGRES_HOST_NAME:localhost}
  port: ${POSTGRES_PORT:5432}
  username: ${POSTGRES_USERNAME:postgres}
  password: ${POSTGRES_PASSWORD:postgres}

keycloak:
  server-uri: ${KEYCLOAK_URL:${services.keycloak.url}}
  token-uri: ${KEYCLOAK_URL:${services.keycloak.url}}/realms/myrealm/protocol/openid-connect/token
  realm: ${KEYCLOAK_REAL:myrealm}
  client-id: ${KEYCLOAK_CLIENT_ID:spring-gateway}
  client-secret: ${KEYCLOAK_CLIENT_SECRET:x6mDuoCJETz9kIdRVU3U6ibWx6Jmfegq}
  username: ${KEYCLOAK_USERNAME:admin}
  password: ${KEYCLOAK_PASSWORD:admin}

spring:
  security:
    oauth2:
      client:
        registration:
          keycloak-client-credentials:
            client-id: ${keycloak.client-id}
            client-secret: ${keycloak.client-secret}
            authorization-grant-type: client_credentials
            provider: keycloak
        provider:
          keycloak:
            token-uri: ${KEYCLOAK_URL:${services.keycloak.url}}/realms/myrealm/protocol/openid-connect/token
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_URL:${services.keycloak.url}}/realms/myrealm
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

# logging:
#   level:
#     org.springframework.security.oauth2.client: DEBUG
#     org.springframework.web.client.RestTemplate: DEBUG
#     org.springframework.web: DEBUG
#     feign: DEBUG

feign:
  client:
    config:
      default:
        connectTimeout: 3000
        readTimeout: 5000

eureka:
  client:
    enabled: false
